name: Unit & Integration Tests

on:
    pull_request:
        branches:
            - develop
        paths-ignore:
            - '*.md'
env:
    DATABASE_URL: postgres://postgres:mysecretpassword@localhost:5432/notifications

jobs:
    Build:
        name: Build Application
        runs-on: ubuntu-latest

        permissions:
            contents: read

        steps:
            - name: Checkout repo
              uses: actions/checkout@master

            - name: Generate .env
              run: |
                  cat << EOF > .env
                  CONTENTFUL_SPACE_ID=${{ secrets.DEV_CONTENTFUL_SPACE_ID }}
                  CONTENTFUL_ACCESS_TOKEN=${{ secrets.DEV_CONTENTFUL_ACCESS_TOKEN }}
                  CONTENTFUL_PREVIEW_ACCESS_TOKEN=${{ secrets.DEV_CONTENTFUL_PREVIEW_ACCESS_TOKEN }}
                  CONTENTFUL_MANAGEMENT_TOKEN=${{ secrets.DEV_CONTENTFUL_MANAGEMENT_TOKEN }}
                  CONTENTFUL_ENVIRONMENT=${{ secrets.DEV_CONTENTFUL_ENVIRONMENT }}
                  ELASTIC_INDEX=${{ secrets.DEV_ELASTIC_INDEX }}
                  ELASTIC_URL=${{ secrets.DEV_ELASTIC_URL }}
                  ELASTIC_USERNAME=${{ secrets.DEV_ELASTIC_USERNAME }}
                  ELASTIC_PASSWORD=${{ secrets.DEV_ELASTIC_PASSWORD }}
                  GOV_NOTIFY_API_KEY=${{ secrets.GOV_NOTIFY_API_KEY }}
                  GOV_NOTIFY_GRANT_UPDATED_EMAIL_TEMPLATE_ID=${{ secrets.GOV_NOTIFY_GRANT_UPDATED_EMAIL_TEMPLATE_ID }}
                  GOV_NOTIFY_GRANT_CLOSING_EMAIL_TEMPLATE_ID=${{ secrets.GOV_NOTIFY_GRANT_CLOSING_EMAIL_TEMPLATE_ID }}
                  GOV_NOTIFY_GRANT_OPENING_EMAIL_TEMPLATE_ID=${{ secrets.GOV_NOTIFY_GRANT_OPENING_EMAIL_TEMPLATE_ID }}
                  GOV_NOTIFY_SAVED_SEARCH_NOTIFICATION_EMAIL_TEMPLATE_ID=${{ secrets.GOV_NOTIFY_SAVED_SEARCH_NOTIFICATION_EMAIL_TEMPLATE_ID }}
                  DATABASE_SSL=true
                  HOST=${{ secrets.DEV_ENVIRONMENT_URL }}
                  ENCRYPTION_KEY_NAME=${{ secrets.DEV_ENCRYPTION_KEY_NAME }}
                  ENCRYPTION_KEY_NAMESPACE=${{ secrets.DEV_ENCRYPTION_KEY_NAMESPACE }}
                  ENCRYPTION_ORIGIN=${{ secrets.DEV_ENCRYPTION_ORIGIN }}
                  ENCRYPTION_STAGE=${{ secrets.DEV_ENCRYPTION_STAGE }}
                  ENCRYPTION_WRAPPING_KEY=${{ secrets.DEV_ENCRYPTION_WRAPPING_KEY }}
                  FRONT_END_HOST=${{ secrets.DEV_FRONTEND_URL }}
                  EOF

            - name: Read .nvmrc
              id: nvm
              run: echo "name=NVMRC::$(cat .nvmrc)" >> $GITHUB_OUTPUT

            - name: Setup node
              uses: actions/setup-node@master
              with:
                  node-version: '${{ steps.nvm.outputs.NVMRC }}'
                  cache: 'yarn'

            - name: Install dependencies
              run: yarn install --immutable

            - name: Build application
              run: yarn build

            - name: Units Tests
              run: yarn jest --ci
