name: Deploy to QAT

on:
    pull_request:
        types: [open]
        branches:
            - main
        paths-ignore:
            - '*.md'

    workflow_dispatch:
        inputs:
            git-ref:
                description: Git Ref (Optional)
                required: false

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    # ==============================

    DeployQa:
        name: Deploy to QAT
        runs-on: ubuntu-latest

        env:
            CF_API: 'https://api.london.cloud.service.gov.uk'
            CF_ORG: 'cabinet-office-gap'
            CF_SPACE: 'qat'
            CF_APP: 'q_gap_backend'

        permissions:
            contents: read

        steps:
            - name: Checkout repo
              uses: actions/checkout@master

            - name: Generate .env
              run: |
                  cat << EOF > .env
                  CONTENTFUL_SPACE_ID=${{ secrets.QA_CONTENTFUL_SPACE_ID }}
                  CONTENTFUL_ACCESS_TOKEN=${{ secrets.QA_CONTENTFUL_ACCESS_TOKEN }}
                  CONTENTFUL_PREVIEW_ACCESS_TOKEN=${{ secrets.QA_CONTENTFUL_PREVIEW_ACCESS_TOKEN }}
                  CONTENTFUL_MANAGEMENT_TOKEN=${{ secrets.QA_CONTENTFUL_MANAGEMENT_TOKEN }}
                  CONTENTFUL_ENVIRONMENT=${{ secrets.QA_CONTENTFUL_ENVIRONMENT }}
                  ELASTIC_INDEX=${{ secrets.QA_ELASTIC_INDEX }}
                  ELASTIC_URL=${{ secrets.QA_ELASTIC_URL }}
                  ELASTIC_USERNAME=${{ secrets.QA_ELASTIC_USERNAME }}
                  ELASTIC_PASSWORD=${{ secrets.QA_ELASTIC_PASSWORD }}
                  GOV_NOTIFY_API_KEY=${{ secrets.LIVE_GOV_NOTIFY_API_KEY }}
                  GOV_NOTIFY_GRANT_UPDATED_EMAIL_TEMPLATE_ID=${{ secrets.LIVE_GOV_NOTIFY_GRANT_UPDATED_EMAIL_TEMPLATE_ID }}
                  GOV_NOTIFY_GRANT_CLOSING_EMAIL_TEMPLATE_ID=${{ secrets.LIVE_GOV_NOTIFY_GRANT_CLOSING_EMAIL_TEMPLATE_ID }}
                  GOV_NOTIFY_GRANT_OPENING_EMAIL_TEMPLATE_ID=${{ secrets.LIVE_GOV_NOTIFY_GRANT_OPENING_EMAIL_TEMPLATE_ID }}
                  GOV_NOTIFY_NEW_GRANTS_EMAIL_TEMPLATE_ID=${{ secrets.LIVE_GOV_NOTIFY_NEW_GRANTS_EMAIL_TEMPLATE_ID }}
                  GOV_NOTIFY_SAVED_SEARCH_NOTIFICATION_EMAIL_TEMPLATE_ID=${{ secrets.LIVE_GOV_NOTIFY_SAVED_SEARCH_NOTIFICATION_EMAIL_TEMPLATE_ID }}
                  DATABASE_SSL=true
                  HOST=${{ secrets.QA_ENVIRONMENT_URL }}
                  ENCRYPTION_KEY_NAME=${{ secrets.QA_ENCRYPTION_KEY_NAME }}
                  ENCRYPTION_KEY_NAMESPACE=${{ secrets.QA_ENCRYPTION_KEY_NAMESPACE }}
                  ENCRYPTION_ORIGIN=${{ secrets.QA_ENCRYPTION_ORIGIN }}
                  ENCRYPTION_STAGE=${{ secrets.QA_ENCRYPTION_STAGE }}
                  ENCRYPTION_WRAPPING_KEY=${{ secrets.QA_ENCRYPTION_WRAPPING_KEY }}
                  FRONT_END_HOST=${{ secrets.QA_FRONTEND_URL }}
                  EOF

            - name: Read .nvmrc
              run: echo "::set-output name=NVMRC::$(cat .nvmrc)"
              id: nvm

            - name: Setup node
              uses: actions/setup-node@master
              with:
                  node-version: '${{ steps.nvm.outputs.NVMRC }}'

            - name: Snyk setup
              uses: snyk/actions/node@master
              env:
                  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
              with:
                  args: --fail-on=all

            - name: Install yarn
              run: npm install -g yarn

            - name: Read yarn cache directory path
              run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
              id: yarn-cache-dir-path

            - name: Cache dependencies
              uses: actions/cache@v2
              id: yarn-cache
              with:
                  path: |
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                      **/node_modules
                  key: ${{ runner.os }}-yarn-v2-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-v2-

            - name: Install dependencies
              if: steps.yarn-cache.outputs.cache-hit != 'true'
              run: |
                  yarn install --frozen-lockfile

            - name: Units Tests
              run: |
                  yarn test:cov

            - name: Build application
              run: |
                  yarn build

            - name: Install Cloud Foundary
              run: |
                  wget -q -O cf.tar.gz "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=7.4.0&source=github-rel"
                  sudo tar xzf cf.tar.gz --wildcards --directory /usr/local/bin/ "cf*"

            - name: Login to GPaas
              env:
                  CF_USERNAME: ${{ secrets.CF_USERNAME }}
                  CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
              run: |
                  echo "Login into ${CF_ORG}/${CF_SPACE}..."
                  cf api "${CF_API}"
                  cf auth
                  cf target -o "${CF_ORG}" -s "${CF_SPACE}"
                  cf apps

            - name: Deploy to GPaaS
              run: |
                  cf push "${CF_APP}" -f manifest.yml.qa --strategy rolling -u process

            - name: Logout of GPaaS
              run: |
                  cf env "${CF_APP}"
                  cf logout

    # ==============================
